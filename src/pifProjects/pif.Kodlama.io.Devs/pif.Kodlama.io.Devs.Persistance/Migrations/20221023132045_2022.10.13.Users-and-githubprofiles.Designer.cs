// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using pif.Kodlama.io.Devs.Persistance.Contexts;

#nullable disable

namespace pif.Kodlama.io.Devs.Persistance.Migrations
{
    [DbContext(typeof(BaseDbContext))]
    [Migration("20221023132045_2022.10.13.Users-and-githubprofiles")]
    partial class _20221013Usersandgithubprofiles
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("pif.Core.Security.Entities.OperationClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("OperationClaims");
                });

            modelBuilder.Entity("pif.Core.Security.Entities.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedByIp")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReasonRevoked")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReplacedByToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Revoked")
                        .HasColumnType("datetime2");

                    b.Property<string>("RevokedByIp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("pif.Core.Security.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AuthenticatorType")
                        .HasColumnType("int");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("User");

                    b.HasDiscriminator<string>("Discriminator").HasValue("User");
                });

            modelBuilder.Entity("pif.Core.Security.Entities.UserOperationClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("OperationClaimId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OperationClaimId");

                    b.HasIndex("UserId");

                    b.ToTable("UserOperationClaims");
                });

            modelBuilder.Entity("pif.Kodlama.io.Devs.Domain.Entities.GithubProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("GithubAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("GithubAddress");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("GithubProfiles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            GithubAddress = "/pif128",
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            GithubAddress = "/aaa",
                            UserId = 1
                        });
                });

            modelBuilder.Entity("pif.Kodlama.io.Devs.Domain.Entities.ProgrammingLanguage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.ToTable("ProgrammingLanguages", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "C#"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Java"
                        });
                });

            modelBuilder.Entity("pif.Kodlama.io.Devs.Domain.Entities.Technology", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<int>("ProgrammingLanguageId")
                        .HasColumnType("int")
                        .HasColumnName("ProgrammingLanguageId");

                    b.HasKey("Id");

                    b.HasIndex("ProgrammingLanguageId");

                    b.ToTable("Technologies", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "WPF",
                            ProgrammingLanguageId = 1
                        },
                        new
                        {
                            Id = 2,
                            Name = "Asp.NET",
                            ProgrammingLanguageId = 1
                        },
                        new
                        {
                            Id = 3,
                            Name = "JPS",
                            ProgrammingLanguageId = 2
                        });
                });

            modelBuilder.Entity("pif.Kodlama.io.Devs.Domain.Entities.KodlamaUser", b =>
                {
                    b.HasBaseType("pif.Core.Security.Entities.User");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("KodlamaUser");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuthenticatorType = 0,
                            Email = "pif@pif128.com",
                            FirstName = "pif",
                            LastName = "128",
                            PasswordHash = new byte[] { 150, 76, 52, 242, 2, 47, 239, 144, 242, 185, 248, 148, 181, 95, 176, 28, 53, 81, 167, 138, 33, 23, 60, 245, 69, 54, 116, 144, 175, 63, 55, 247, 200, 151, 11, 19, 207, 90, 160, 112, 249, 129, 34, 62, 95, 94, 96, 17, 133, 2, 243, 163, 255, 164, 79, 49, 244, 3, 128, 80, 143, 44, 126, 159 },
                            PasswordSalt = new byte[] { 14, 176, 244, 8, 72, 212, 211, 115, 248, 176, 251, 202, 237, 242, 133, 112, 150, 133, 89, 173, 44, 196, 151, 238, 152, 124, 170, 107, 141, 118, 56, 58, 59, 239, 202, 192, 113, 166, 40, 90, 117, 175, 148, 153, 232, 71, 27, 66, 120, 53, 197, 171, 84, 151, 149, 165, 219, 148, 75, 162, 169, 237, 145, 102, 39, 44, 76, 51, 71, 108, 174, 139, 44, 34, 227, 144, 9, 240, 179, 221, 172, 154, 132, 208, 180, 248, 243, 116, 246, 150, 189, 62, 71, 254, 7, 176, 245, 204, 0, 192, 48, 4, 230, 61, 9, 228, 237, 28, 164, 177, 111, 3, 219, 16, 78, 191, 87, 137, 126, 41, 142, 106, 195, 234, 126, 35, 5, 44 },
                            Status = true,
                            UserName = "pif128"
                        },
                        new
                        {
                            Id = 2,
                            AuthenticatorType = 0,
                            Email = "pif2@pif128.com",
                            FirstName = "pif2",
                            LastName = "128",
                            PasswordHash = new byte[] { 150, 76, 52, 242, 2, 47, 239, 144, 242, 185, 248, 148, 181, 95, 176, 28, 53, 81, 167, 138, 33, 23, 60, 245, 69, 54, 116, 144, 175, 63, 55, 247, 200, 151, 11, 19, 207, 90, 160, 112, 249, 129, 34, 62, 95, 94, 96, 17, 133, 2, 243, 163, 255, 164, 79, 49, 244, 3, 128, 80, 143, 44, 126, 159 },
                            PasswordSalt = new byte[] { 14, 176, 244, 8, 72, 212, 211, 115, 248, 176, 251, 202, 237, 242, 133, 112, 150, 133, 89, 173, 44, 196, 151, 238, 152, 124, 170, 107, 141, 118, 56, 58, 59, 239, 202, 192, 113, 166, 40, 90, 117, 175, 148, 153, 232, 71, 27, 66, 120, 53, 197, 171, 84, 151, 149, 165, 219, 148, 75, 162, 169, 237, 145, 102, 39, 44, 76, 51, 71, 108, 174, 139, 44, 34, 227, 144, 9, 240, 179, 221, 172, 154, 132, 208, 180, 248, 243, 116, 246, 150, 189, 62, 71, 254, 7, 176, 245, 204, 0, 192, 48, 4, 230, 61, 9, 228, 237, 28, 164, 177, 111, 3, 219, 16, 78, 191, 87, 137, 126, 41, 142, 106, 195, 234, 126, 35, 5, 44 },
                            Status = true,
                            UserName = "2pif128"
                        });
                });

            modelBuilder.Entity("pif.Core.Security.Entities.RefreshToken", b =>
                {
                    b.HasOne("pif.Core.Security.Entities.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("pif.Core.Security.Entities.UserOperationClaim", b =>
                {
                    b.HasOne("pif.Core.Security.Entities.OperationClaim", "OperationClaim")
                        .WithMany()
                        .HasForeignKey("OperationClaimId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("pif.Core.Security.Entities.User", "User")
                        .WithMany("UserOperationClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OperationClaim");

                    b.Navigation("User");
                });

            modelBuilder.Entity("pif.Kodlama.io.Devs.Domain.Entities.GithubProfile", b =>
                {
                    b.HasOne("pif.Kodlama.io.Devs.Domain.Entities.KodlamaUser", "User")
                        .WithMany("GithubProfiles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("pif.Kodlama.io.Devs.Domain.Entities.Technology", b =>
                {
                    b.HasOne("pif.Kodlama.io.Devs.Domain.Entities.ProgrammingLanguage", "ProgrammingLanguage")
                        .WithMany("Technologies")
                        .HasForeignKey("ProgrammingLanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProgrammingLanguage");
                });

            modelBuilder.Entity("pif.Core.Security.Entities.User", b =>
                {
                    b.Navigation("RefreshTokens");

                    b.Navigation("UserOperationClaims");
                });

            modelBuilder.Entity("pif.Kodlama.io.Devs.Domain.Entities.ProgrammingLanguage", b =>
                {
                    b.Navigation("Technologies");
                });

            modelBuilder.Entity("pif.Kodlama.io.Devs.Domain.Entities.KodlamaUser", b =>
                {
                    b.Navigation("GithubProfiles");
                });
#pragma warning restore 612, 618
        }
    }
}
