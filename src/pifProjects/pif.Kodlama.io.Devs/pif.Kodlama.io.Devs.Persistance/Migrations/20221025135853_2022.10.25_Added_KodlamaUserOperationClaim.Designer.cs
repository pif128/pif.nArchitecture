// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using pif.Kodlama.io.Devs.Persistance.Contexts;

#nullable disable

namespace pif.Kodlama.io.Devs.Persistance.Migrations
{
    [DbContext(typeof(BaseDbContext))]
    [Migration("20221025135853_2022.10.25_Added_KodlamaUserOperationClaim")]
    partial class _20221025_Added_KodlamaUserOperationClaim
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("pif.Core.Security.Entities.OperationClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("OperationClaims");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            Name = "User"
                        });
                });

            modelBuilder.Entity("pif.Core.Security.Entities.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedByIp")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReasonRevoked")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReplacedByToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Revoked")
                        .HasColumnType("datetime2");

                    b.Property<string>("RevokedByIp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("pif.Core.Security.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AuthenticatorType")
                        .HasColumnType("int");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("User");

                    b.HasDiscriminator<string>("Discriminator").HasValue("User");
                });

            modelBuilder.Entity("pif.Core.Security.Entities.UserOperationClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OperationClaimId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OperationClaimId");

                    b.HasIndex("UserId");

                    b.ToTable("UserOperationClaim");

                    b.HasDiscriminator<string>("Discriminator").HasValue("UserOperationClaim");
                });

            modelBuilder.Entity("pif.Kodlama.io.Devs.Domain.Entities.GithubProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("GithubAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("GithubAddress");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("GithubProfiles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            GithubAddress = "/pif128",
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            GithubAddress = "/aaa",
                            UserId = 1
                        });
                });

            modelBuilder.Entity("pif.Kodlama.io.Devs.Domain.Entities.ProgrammingLanguage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.ToTable("ProgrammingLanguages", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "C#"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Java"
                        });
                });

            modelBuilder.Entity("pif.Kodlama.io.Devs.Domain.Entities.Technology", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<int>("ProgrammingLanguageId")
                        .HasColumnType("int")
                        .HasColumnName("ProgrammingLanguageId");

                    b.HasKey("Id");

                    b.HasIndex("ProgrammingLanguageId");

                    b.ToTable("Technologies", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "WPF",
                            ProgrammingLanguageId = 1
                        },
                        new
                        {
                            Id = 2,
                            Name = "Asp.NET",
                            ProgrammingLanguageId = 1
                        },
                        new
                        {
                            Id = 3,
                            Name = "JPS",
                            ProgrammingLanguageId = 2
                        });
                });

            modelBuilder.Entity("pif.Kodlama.io.Devs.Domain.Entities.KodlamaUser", b =>
                {
                    b.HasBaseType("pif.Core.Security.Entities.User");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("KodlamaUser");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuthenticatorType = 0,
                            Email = "pif@pif128.com",
                            FirstName = "pif",
                            LastName = "128",
                            PasswordHash = new byte[] { 176, 151, 96, 71, 5, 151, 88, 142, 26, 177, 50, 51, 238, 155, 213, 8, 232, 228, 131, 245, 231, 219, 126, 156, 182, 112, 210, 136, 69, 169, 108, 238, 41, 52, 88, 163, 221, 104, 127, 225, 205, 1, 202, 212, 82, 178, 82, 63, 88, 179, 32, 87, 87, 3, 82, 234, 89, 60, 201, 221, 91, 226, 86, 174 },
                            PasswordSalt = new byte[] { 213, 95, 16, 44, 162, 166, 31, 9, 231, 74, 44, 201, 232, 102, 22, 11, 241, 199, 2, 215, 209, 79, 159, 45, 188, 250, 74, 239, 184, 122, 206, 150, 78, 11, 5, 1, 169, 212, 44, 201, 237, 124, 163, 120, 31, 149, 238, 180, 193, 206, 239, 157, 236, 67, 7, 19, 169, 183, 11, 11, 21, 205, 26, 205, 139, 83, 246, 103, 62, 97, 44, 5, 232, 218, 6, 80, 92, 248, 109, 134, 148, 23, 1, 236, 146, 7, 230, 91, 50, 112, 67, 159, 219, 186, 104, 139, 41, 131, 125, 43, 90, 74, 1, 122, 240, 16, 141, 67, 229, 224, 182, 191, 64, 145, 49, 204, 248, 118, 50, 252, 7, 254, 240, 80, 114, 26, 42, 111 },
                            Status = true,
                            UserName = "pif128"
                        },
                        new
                        {
                            Id = 2,
                            AuthenticatorType = 0,
                            Email = "pif2@pif128.com",
                            FirstName = "pif2",
                            LastName = "128",
                            PasswordHash = new byte[] { 176, 151, 96, 71, 5, 151, 88, 142, 26, 177, 50, 51, 238, 155, 213, 8, 232, 228, 131, 245, 231, 219, 126, 156, 182, 112, 210, 136, 69, 169, 108, 238, 41, 52, 88, 163, 221, 104, 127, 225, 205, 1, 202, 212, 82, 178, 82, 63, 88, 179, 32, 87, 87, 3, 82, 234, 89, 60, 201, 221, 91, 226, 86, 174 },
                            PasswordSalt = new byte[] { 213, 95, 16, 44, 162, 166, 31, 9, 231, 74, 44, 201, 232, 102, 22, 11, 241, 199, 2, 215, 209, 79, 159, 45, 188, 250, 74, 239, 184, 122, 206, 150, 78, 11, 5, 1, 169, 212, 44, 201, 237, 124, 163, 120, 31, 149, 238, 180, 193, 206, 239, 157, 236, 67, 7, 19, 169, 183, 11, 11, 21, 205, 26, 205, 139, 83, 246, 103, 62, 97, 44, 5, 232, 218, 6, 80, 92, 248, 109, 134, 148, 23, 1, 236, 146, 7, 230, 91, 50, 112, 67, 159, 219, 186, 104, 139, 41, 131, 125, 43, 90, 74, 1, 122, 240, 16, 141, 67, 229, 224, 182, 191, 64, 145, 49, 204, 248, 118, 50, 252, 7, 254, 240, 80, 114, 26, 42, 111 },
                            Status = true,
                            UserName = "2pif128"
                        });
                });

            modelBuilder.Entity("pif.Kodlama.io.Devs.Domain.Entities.KodlamaUserOperationClaim", b =>
                {
                    b.HasBaseType("pif.Core.Security.Entities.UserOperationClaim");

                    b.Property<int>("KodlamaUserId")
                        .HasColumnType("int");

                    b.HasIndex("KodlamaUserId");

                    b.HasDiscriminator().HasValue("KodlamaUserOperationClaim");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            OperationClaimId = 1,
                            UserId = 1,
                            KodlamaUserId = 1
                        },
                        new
                        {
                            Id = 2,
                            OperationClaimId = 2,
                            UserId = 2,
                            KodlamaUserId = 2
                        });
                });

            modelBuilder.Entity("pif.Core.Security.Entities.RefreshToken", b =>
                {
                    b.HasOne("pif.Core.Security.Entities.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("pif.Core.Security.Entities.UserOperationClaim", b =>
                {
                    b.HasOne("pif.Core.Security.Entities.OperationClaim", "OperationClaim")
                        .WithMany()
                        .HasForeignKey("OperationClaimId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("pif.Core.Security.Entities.User", "User")
                        .WithMany("UserOperationClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OperationClaim");

                    b.Navigation("User");
                });

            modelBuilder.Entity("pif.Kodlama.io.Devs.Domain.Entities.GithubProfile", b =>
                {
                    b.HasOne("pif.Kodlama.io.Devs.Domain.Entities.KodlamaUser", "User")
                        .WithMany("GithubProfiles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("pif.Kodlama.io.Devs.Domain.Entities.Technology", b =>
                {
                    b.HasOne("pif.Kodlama.io.Devs.Domain.Entities.ProgrammingLanguage", "ProgrammingLanguage")
                        .WithMany("Technologies")
                        .HasForeignKey("ProgrammingLanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProgrammingLanguage");
                });

            modelBuilder.Entity("pif.Kodlama.io.Devs.Domain.Entities.KodlamaUserOperationClaim", b =>
                {
                    b.HasOne("pif.Kodlama.io.Devs.Domain.Entities.KodlamaUser", "KodlamaUser")
                        .WithMany()
                        .HasForeignKey("KodlamaUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("KodlamaUser");
                });

            modelBuilder.Entity("pif.Core.Security.Entities.User", b =>
                {
                    b.Navigation("RefreshTokens");

                    b.Navigation("UserOperationClaims");
                });

            modelBuilder.Entity("pif.Kodlama.io.Devs.Domain.Entities.ProgrammingLanguage", b =>
                {
                    b.Navigation("Technologies");
                });

            modelBuilder.Entity("pif.Kodlama.io.Devs.Domain.Entities.KodlamaUser", b =>
                {
                    b.Navigation("GithubProfiles");
                });
#pragma warning restore 612, 618
        }
    }
}
